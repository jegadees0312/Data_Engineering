# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I9i1lEl9VEiclKKuz6bb5NmdrRYMy37X
"""

pip install pyspark

from pyspark.sql import SparkSession
from pyspark.sql.functions import col

# initialize spark session
spark = SparkSession.builder.appName("Product Sales Analysis").getOrCreate()

# Sample data for products
products = [
    (1,"Laptop","Electronics",50000),
    (2,"SmartPhone","Electronics",30000),
    (3,"Table","Furnitur",15000),
    (4,"Chair","Furniture",5000),
    (5,"Headphone","Electronics",2000),
]

# sample data for sales transactions
sales = [
    (1,1,2),
    (2,2,1),
    (3,3,3),
    (4,1,1),
    (5, 4, 5),
    (6, 2, 2),
    (7, 5, 10),
    (8, 3, 1),
]

# Define schema for DataFrames
product_columns = ["ProductID", "ProductName", "Category", "Price"]
sales_columns = ["SaleID", "ProductID", "Quantity"]

# Create DataFrames
product_df = spark.createDataFrame(products, schema=product_columns)
sales_df = spark.createDataFrame(sales, schema=sales_columns)

# Show the DataFrames
print("Products DataFrame:")
product_df.show()

print("Sales DataFrame:")
sales_df.show()

# Joining the tables
joined_df = sales_df.join(product_df, on="ProductId")
print("joined data :")
joined_df.show()

# Total sales value
Total_sales_df = joined_df.withColumn("Total_Sales",col("Price")*col("Quantity"))
print("Total sales value:")
Total_sales_df.show()

# Group by Category and calculate total sales value for each category
category_sales_df = Total_sales_df.groupBy("Category").sum("Total_Sales")
category_sales_df = category_sales_df.withColumnRenamed("sum(Total_Sales)", "TotalSalesValue")
print("Total sales value for each category:")
category_sales_df.show()

# Group by ProductName and calculate total sales value for each product
product_sales_df = Total_sales_df.groupBy("ProductName").sum("Total_Sales")
product_sales_df = product_sales_df.withColumnRenamed("sum(Total_Sales)", "TotalSalesValue")
print("Total sales value for each product:")
product_sales_df.show()

# Find the top-selling product
top_selling_product_df = product_sales_df.orderBy(col("TotalSalesValue").desc()).limit(1)
print("Top selling product:")
top_selling_product_df.show()

# Sort products by total sales value in descending order
sorted_products_df = product_sales_df.orderBy(col("TotalSalesValue").desc())
print("Sorted products by total sales value:")
sorted_products_df.show()

# Count the number of sales transactions for each product
product_sales_count_df = joined_df.groupBy("ProductName").count()
print("Number of sales Transactionhs:")
product_sales_count_df.show()

# Filter products with total sales value greater than 50,000
high_value_products_df = product_sales_df.filter(col("TotalSalesValue") > 50000)
print("High value products greated than 50000:")
high_value_products_df.show()

